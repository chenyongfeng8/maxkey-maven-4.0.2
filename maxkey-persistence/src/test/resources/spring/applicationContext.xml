<?xml version="1.0" encoding="UTF-8"?>
<beans 	xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
	        http://www.springframework.org/schema/beans     
	        http://www.springframework.org/schema/beans/spring-beans.xsd
	        http://www.springframework.org/schema/context 
	        http://www.springframework.org/schema/context/spring-context.xsd
	        http://www.springframework.org/schema/tx 
	        http://www.springframework.org/schema/tx/spring-tx.xsd
	        http://www.springframework.org/schema/util     
	        http://www.springframework.org/schema/util/spring-util.xsd
	        http://www.springframework.org/schema/mvc 
	        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 	<!-- dataSource define begin -->
	<!-- dataSource configuration -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close" >      
	   <!--  <property name="driverClass" value="#{dataSoruceConfig.driverClass}"/>     -->  
	    <property name="url" value="${spring.datasource.url}"/>      
	    <property name="username" value="${spring.datasource.username}"/>      
	    <property name="password" value="${spring.datasource.password}"/>       
	</bean> 
	
 	<!-- Application properties configs  -->
	<bean id="propertySourcesPlaceholderConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
	  <property name="locations">
	    <list>
	   	  	<value>classpath:application.properties</value>
	    </list>
	  </property>
	  <property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>
 	
 	<!-- Authentication Password Encoder Config -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>   
	
	<bean id="passwordReciprocal" class="org.maxkey.crypto.password.PasswordReciprocal"></bean>
 
 	<bean id="kafkaPersistService" class="org.maxkey.persistence.kafka.KafkaPersistService"></bean>
	
	<bean id="applicationConfig" class="org.maxkey.configuration.ApplicationConfig"></bean>
	
	<bean id="emailConfig" class="org.maxkey.configuration.EmailConfig"></bean>
 	<bean id="characterEncodingConfig" class="org.maxkey.configuration.CharacterEncodingConfig"></bean>
 	<bean id="loginConfig" class="org.maxkey.configuration.LoginConfig"></bean>
 	
 	<bean id="passwordPolicyValidator" class="org.maxkey.persistence.db.PasswordPolicyValidator">
 		
 	</bean>
 	
   <bean id="producerProperties" class="java.util.HashMap">
         <constructor-arg>
             <map>
                 <entry key="bootstrap.servers" value="${kafka.producer.bootstrap.servers}" />
                 <!--<entry key="group.id" value="${group.id}" />-->
                 <entry key="retries" value="${kafka.producer.retries}" />
                 <entry key="batch.size" value="${kafka.producer.batch.size}" />
                 <entry key="linger.ms" value="${kafka.producer.linger.ms}" />
                 <entry key="buffer.memory" value="${kafka.producer.buffer.memory}" />
                 <entry key="acks" value="${kafka.producer.acks}" />
                 <entry key="key.serializer" value="${kafka.producer.key.serializer}" />
                 <entry key="value.serializer" value="${kafka.producer.value.serializer}"/>
             </map>
         </constructor-arg>
     </bean>
 
     <!-- 创建kafkatemplate需要使用的producerfactory bean -->
     <bean id="producerFactory"
           class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
         <constructor-arg>
             <ref bean="producerProperties" />
         </constructor-arg>
     </bean>
 
     <!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 -->
     <bean id="kafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">
         <constructor-arg ref="producerFactory" />
         <constructor-arg name="autoFlush" value="true" />
     </bean>
 	<!-- 配置执行的任务列表  -->
 	<util:list id="businessTask" list-class="java.util.ArrayList">

 	</util:list>
 	
 	
  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <tx:annotation-driven transaction-manager="txManager" />

  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- enable transaction demarcation with annotations 
    <tx:annotation-driven />-->

    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <bean id="sqlSessionFactory" class="org.apache.mybatis.jpa.MyBatisSessionFactoryBean">
        <property name="timeout" value="30" />
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:/org/maxkey/persistence/mapper/xml/mysql/*.xml" />
        <property name="typeAliasesPackage" 
                  value="
                        org.maxkey.entity,
                        org.maxkey.entity.apps,
                    " />
        <property name="transactionFactory">
            <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
        </property>
        <property name="interceptors">
            <list>
                    <bean class="org.apache.mybatis.jpa.StatementHandlerInterceptor">
                        <property name="dialectString" value="org.apache.mybatis.jpa.dialect.MySQLDialect"/>
                    </bean>
            </list>
        </property>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" 
                  value="
                        org.maxkey.persistence.mapper,
                        " />
      
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->    
    <context:component-scan base-package="org.maxkey.persistence.service" />
    
    <bean class ="org.apache.mybatis.jpa.id.IdentifierGeneratorFactory">
    <!-- 
        <property name="generatorStrategyMap" >
            <map>
                <entry key="serial" >
                    <bean class="org.apache.mybatis.jpa.id.SerialGenerator">
                        <property name="ipAddressNodeValue"  value="F0-76-1C-B0-26-9C=02,"/>
                    </bean></entry>
            </map>
        </property>
        -->
    </bean>
    
    <!-- 
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
     -->
     
</beans>